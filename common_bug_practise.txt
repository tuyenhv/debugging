The original document is from https://www.iiitd.edu.in/~jalote/papers/CommonBugs.pdf

I. Bug with pointers and memory.

I.1 Memory leaks
This is a common programming bug which occurs frequently in the languge which do not have automatic garbage collection like C/C++.
Reason: The memory is allocated to the program but it is not freed after.
Solve: please free the memory when it is not used any more. (normarlly End of function, should free the memory which is allocated before).

char* foo ( int s )
{
  char *output ;
  if (s >0)
    output =( char *) malloc ( size );
  if ( s ==1)
    return NULL ;
  return ( output );
  /* if s >0 and s ==1 then ,
  * allocated memory for output
  * is leaked */
}

I.2 Trả về giá trị của biến cục bộ
Biến được khai báo trong hàm là biến cục bộ trong hàm.
char * foo (){
  char ch ;
  // some operations
  return (& ch );
  /* local variable from the stack is returned */
}

I.3 Giải phóng vùng nhớ đã giải phóng.
Lập trình viên cố gắng giải phóng vùng nhớ khi mà nó đã được giải phóng trước đó.

main (){
  char * str ;
  str =( char *) malloc (10);
  if ( global ==0)
    free ( str );
  // Some statements
  free ( str ); /* Here str is already freed
                 * on true branch */
}

I. 4 Null dereference
Lỗi này xảy ra khi chúng ta cố gắng sử dụng con trỏ trong khi nó đang được trỏ tới NULL.
char * ch = NULL ;
if (x >0){
  ch = ’c ’;
}
printf ("\% c " , * ch );
// ch may be NULL
Trong ví dụ trên, có thể chương trình không nhảy vào khổi lệnh trong if. Như vậy con trỏ ch sẽ không
được gán giá trị và chúng ta đã lấy giá trị của con trỏ ch sau đó.

// From now on, English version
I.5 Exposure of private data to untrusted components
Sometimes it is important to preserve the integrity and security of data.
The data which is supposed to be private should not be given access to external source.

struct node {
  char * ch ;
};
char * foo ( struct node nn ){
  return ( nn . ch );
}
main (){
  struct node n ; char * ff ;
  n.ch =( char *) malloc (1);
  *( n . ch )=100;
  ff = foo( n );
  /* Here ff has an access to structure variable */
}
